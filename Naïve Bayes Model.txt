import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score, recall_score, 
precision_score, roc_auc_score, confusion_matrix
from sklearn.naive_bayes import GaussianNB
from imblearn.over_sampling import SMOTE
# Load the dataset
data_path = "DataSet1.csv"
dataset = pd.read_csv(data_path)
# Select relevant features and labels
X = dataset.drop(['Name', 'Malware'], axis=1)
y = dataset['Malware']
# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, 
random_state=42)
# Oversample the training data using SMOTE
smote = SMOTE(random_state=42)
X_train_res, y_train_res = smote.fit_resample(X_train, y_train)
# Define the model
model = GaussianNB(var_smoothing=1e-9)
# Train the model
model.fit(X_train_res, y_train_res)
# Evaluate the model
y_pred = model.predict(X_test)
y_pred_prob = model.predict_proba(X_test)[:, 1]
# Calculate metrics
acc = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred_prob)
cm = confusion_matrix(y_test, y_pred)
# Print metrics
print('Accuracy:', acc)
print('F1 Score:', f1)
print('Recall:', recall)
print('Precision:', precision)
print('ROC-AUC:', roc_auc)
print('Confusion Matrix:\n', cm)
