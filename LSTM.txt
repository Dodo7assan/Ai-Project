import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, f1_score, recall_score, 
precision_score, roc_auc_score, confusion_matrix
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
# Load the dataset
data_path = "DataSet1.csv"
dataset = pd.read_csv(data_path)
# Select relevant features and labels
X = dataset.drop(['Name', 'Malware'], axis=1) # Adjusted to drop all non-relevant 
columns
y = dataset['Malware']
# Normalize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
# Split the data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, 
random_state=42)
# Reshape input for LSTM layer: (batch, steps, features)
X_train = X_train.reshape(X_train.shape[0], 1, X_train.shape[1])
X_test = X_test.reshape(X_test.shape[0], 1, X_test.shape[1])
# Define the LSTM model
model = Sequential([
 LSTM(64, input_shape=(1, X_train.shape[2]), return_sequences=True),
 Dropout(0.5),
 LSTM(64),
 Dropout(0.5),
 Dense(128, activation='relu'),
 Dropout(0.5),
 Dense(1, activation='sigmoid') # Single output node for binary classification
])
# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
# Train the model
model.fit(X_train, y_train, epochs=10, batch_size=32, verbose=1)
# Evaluate the model
y_pred_prob = model.predict(X_test).flatten() # Predict probabilities for the 
positive class
y_pred = (y_pred_prob > 0.5).astype(int) # Binarize predictions
# Calculate metrics
acc = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
roc_auc = roc_auc_score(y_test, y_pred_prob)
cm = confusion_matrix(y_test, y_pred)
# Print metrics
print('Accuracy:', acc)
print('F1 Score:', f1)
print('Recall:', recall)
print('Precision:', precision)
print('ROC-AUC:', roc_auc)
print('Confusion Matrix:\n', cm)
